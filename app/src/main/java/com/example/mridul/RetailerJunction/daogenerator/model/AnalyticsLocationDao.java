package com.example.mridul.RetailerJunction.daogenerator.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mridul.RetailerJunction.daogenerator.model.AnalyticsLocation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ANALYTICS_LOCATION".
*/
public class AnalyticsLocationDao extends AbstractDao<AnalyticsLocation, Long> {

    public static final String TABLENAME = "ANALYTICS_LOCATION";

    /**
     * Properties of entity AnalyticsLocation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Locationidentifier = new Property(1, String.class, "locationidentifier", false, "LOCATIONIDENTIFIER");
        public final static Property Latitude = new Property(2, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Locationkey = new Property(4, Integer.class, "locationkey", false, "LOCATIONKEY");
        public final static Property Locationdate = new Property(5, Long.class, "locationdate", false, "LOCATIONDATE");
        public final static Property Locationname = new Property(6, String.class, "locationname", false, "LOCATIONNAME");
        public final static Property Locationextraidentifier = new Property(7, String.class, "locationextraidentifier", false, "LOCATIONEXTRAIDENTIFIER");
    };


    public AnalyticsLocationDao(DaoConfig config) {
        super(config);
    }
    
    public AnalyticsLocationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ANALYTICS_LOCATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOCATIONIDENTIFIER\" TEXT," + // 1: locationidentifier
                "\"LATITUDE\" REAL," + // 2: latitude
                "\"LONGITUDE\" REAL," + // 3: longitude
                "\"LOCATIONKEY\" INTEGER," + // 4: locationkey
                "\"LOCATIONDATE\" INTEGER," + // 5: locationdate
                "\"LOCATIONNAME\" TEXT," + // 6: locationname
                "\"LOCATIONEXTRAIDENTIFIER\" TEXT);"); // 7: locationextraidentifier
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ANALYTICS_LOCATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AnalyticsLocation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String locationidentifier = entity.getLocationidentifier();
        if (locationidentifier != null) {
            stmt.bindString(2, locationidentifier);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(3, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        Integer locationkey = entity.getLocationkey();
        if (locationkey != null) {
            stmt.bindLong(5, locationkey);
        }
 
        Long locationdate = entity.getLocationdate();
        if (locationdate != null) {
            stmt.bindLong(6, locationdate);
        }
 
        String locationname = entity.getLocationname();
        if (locationname != null) {
            stmt.bindString(7, locationname);
        }
 
        String locationextraidentifier = entity.getLocationextraidentifier();
        if (locationextraidentifier != null) {
            stmt.bindString(8, locationextraidentifier);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AnalyticsLocation readEntity(Cursor cursor, int offset) {
        AnalyticsLocation entity = new AnalyticsLocation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // locationidentifier
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // locationkey
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // locationdate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // locationname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // locationextraidentifier
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AnalyticsLocation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocationidentifier(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLocationkey(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLocationdate(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLocationname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLocationextraidentifier(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AnalyticsLocation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AnalyticsLocation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
