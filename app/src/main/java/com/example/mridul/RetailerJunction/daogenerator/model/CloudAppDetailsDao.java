package com.example.mridul.RetailerJunction.daogenerator.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mridul.RetailerJunction.daogenerator.model.CloudAppDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOUD_APP_DETAILS".
*/
public class CloudAppDetailsDao extends AbstractDao<CloudAppDetails, Long> {

    public static final String TABLENAME = "CLOUD_APP_DETAILS";

    /**
     * Properties of entity CloudAppDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Campaign_id = new Property(1, Integer.class, "campaign_id", false, "CAMPAIGN_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Version = new Property(3, String.class, "version", false, "VERSION");
        public final static Property Size = new Property(4, Integer.class, "size", false, "SIZE");
        public final static Property Downloadurl = new Property(5, String.class, "downloadurl", false, "DOWNLOADURL");
        public final static Property Packagename = new Property(6, String.class, "packagename", false, "PACKAGENAME");
        public final static Property Md5 = new Property(7, String.class, "md5", false, "MD5");
        public final static Property State = new Property(8, Integer.class, "state", false, "STATE");
        public final static Property Ts = new Property(9, Long.class, "ts", false, "TS");
    };


    public CloudAppDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public CloudAppDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOUD_APP_DETAILS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CAMPAIGN_ID\" INTEGER," + // 1: campaign_id
                "\"NAME\" TEXT," + // 2: name
                "\"VERSION\" TEXT," + // 3: version
                "\"SIZE\" INTEGER," + // 4: size
                "\"DOWNLOADURL\" TEXT," + // 5: downloadurl
                "\"PACKAGENAME\" TEXT," + // 6: packagename
                "\"MD5\" TEXT," + // 7: md5
                "\"STATE\" INTEGER," + // 8: state
                "\"TS\" INTEGER);"); // 9: ts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOUD_APP_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CloudAppDetails entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer campaign_id = entity.getCampaign_id();
        if (campaign_id != null) {
            stmt.bindLong(2, campaign_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(4, version);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(5, size);
        }
 
        String downloadurl = entity.getDownloadurl();
        if (downloadurl != null) {
            stmt.bindString(6, downloadurl);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(7, packagename);
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(8, md5);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(9, state);
        }
 
        Long ts = entity.getTs();
        if (ts != null) {
            stmt.bindLong(10, ts);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CloudAppDetails readEntity(Cursor cursor, int offset) {
        CloudAppDetails entity = new CloudAppDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // campaign_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // version
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // size
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // downloadurl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // packagename
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // md5
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // ts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CloudAppDetails entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCampaign_id(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setVersion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSize(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDownloadurl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPackagename(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMd5(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTs(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CloudAppDetails entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CloudAppDetails entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
