package com.example.mridul.RetailerJunction.daogenerator.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.mridul.RetailerJunction.daogenerator.model.CloudAppDetails;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CLOUD_APP_DETAILS".
*/
public class CloudAppDetailsDao extends AbstractDao<CloudAppDetails, Long> {

    public static final String TABLENAME = "CLOUD_APP_DETAILS";

    /**
     * Properties of entity CloudAppDetails.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property CampaignId = new Property(0, Long.class, "campaignId", true, "CAMPAIGN_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Version = new Property(2, String.class, "version", false, "VERSION");
        public final static Property Size = new Property(3, Integer.class, "size", false, "SIZE");
        public final static Property Downloadurl = new Property(4, String.class, "downloadurl", false, "DOWNLOADURL");
        public final static Property Packagename = new Property(5, String.class, "packagename", false, "PACKAGENAME");
        public final static Property Checksum = new Property(6, String.class, "checksum", false, "CHECKSUM");
        public final static Property State = new Property(7, Integer.class, "state", false, "STATE");
        public final static Property Minsdk = new Property(8, Integer.class, "minsdk", false, "MINSDK");
        public final static Property Iconurl = new Property(9, String.class, "iconurl", false, "ICONURL");
        public final static Property Category = new Property(10, String.class, "category", false, "CATEGORY");
        public final static Property Desc = new Property(11, String.class, "desc", false, "DESC");
        public final static Property Rating = new Property(12, Float.class, "rating", false, "RATING");
        public final static Property Listts = new Property(13, Long.class, "listts", false, "LISTTS");
        public final static Property IconDownloaded = new Property(14, Boolean.class, "iconDownloaded", false, "ICON_DOWNLOADED");
        public final static Property ApkDownloaded = new Property(15, Boolean.class, "apkDownloaded", false, "APK_DOWNLOADED");
        public final static Property Apkts = new Property(16, Long.class, "apkts", false, "APKTS");
    };


    public CloudAppDetailsDao(DaoConfig config) {
        super(config);
    }
    
    public CloudAppDetailsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CLOUD_APP_DETAILS\" (" + //
                "\"CAMPAIGN_ID\" INTEGER PRIMARY KEY ," + // 0: campaignId
                "\"NAME\" TEXT," + // 1: name
                "\"VERSION\" TEXT," + // 2: version
                "\"SIZE\" INTEGER," + // 3: size
                "\"DOWNLOADURL\" TEXT," + // 4: downloadurl
                "\"PACKAGENAME\" TEXT," + // 5: packagename
                "\"CHECKSUM\" TEXT," + // 6: checksum
                "\"STATE\" INTEGER," + // 7: state
                "\"MINSDK\" INTEGER," + // 8: minsdk
                "\"ICONURL\" TEXT," + // 9: iconurl
                "\"CATEGORY\" TEXT," + // 10: category
                "\"DESC\" TEXT," + // 11: desc
                "\"RATING\" REAL," + // 12: rating
                "\"LISTTS\" INTEGER," + // 13: listts
                "\"ICON_DOWNLOADED\" INTEGER," + // 14: iconDownloaded
                "\"APK_DOWNLOADED\" INTEGER," + // 15: apkDownloaded
                "\"APKTS\" INTEGER);"); // 16: apkts
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CLOUD_APP_DETAILS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CloudAppDetails entity) {
        stmt.clearBindings();
 
        Long campaignId = entity.getCampaignId();
        if (campaignId != null) {
            stmt.bindLong(1, campaignId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(3, version);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(4, size);
        }
 
        String downloadurl = entity.getDownloadurl();
        if (downloadurl != null) {
            stmt.bindString(5, downloadurl);
        }
 
        String packagename = entity.getPackagename();
        if (packagename != null) {
            stmt.bindString(6, packagename);
        }
 
        String checksum = entity.getChecksum();
        if (checksum != null) {
            stmt.bindString(7, checksum);
        }
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(8, state);
        }
 
        Integer minsdk = entity.getMinsdk();
        if (minsdk != null) {
            stmt.bindLong(9, minsdk);
        }
 
        String iconurl = entity.getIconurl();
        if (iconurl != null) {
            stmt.bindString(10, iconurl);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(11, category);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(12, desc);
        }
 
        Float rating = entity.getRating();
        if (rating != null) {
            stmt.bindDouble(13, rating);
        }
 
        Long listts = entity.getListts();
        if (listts != null) {
            stmt.bindLong(14, listts);
        }
 
        Boolean iconDownloaded = entity.getIconDownloaded();
        if (iconDownloaded != null) {
            stmt.bindLong(15, iconDownloaded ? 1L: 0L);
        }
 
        Boolean apkDownloaded = entity.getApkDownloaded();
        if (apkDownloaded != null) {
            stmt.bindLong(16, apkDownloaded ? 1L: 0L);
        }
 
        Long apkts = entity.getApkts();
        if (apkts != null) {
            stmt.bindLong(17, apkts);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CloudAppDetails readEntity(Cursor cursor, int offset) {
        CloudAppDetails entity = new CloudAppDetails( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // campaignId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // version
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // size
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // downloadurl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // packagename
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checksum
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // state
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // minsdk
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // iconurl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // category
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // desc
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // rating
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13), // listts
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // iconDownloaded
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // apkDownloaded
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16) // apkts
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CloudAppDetails entity, int offset) {
        entity.setCampaignId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVersion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSize(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDownloadurl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPackagename(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChecksum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setState(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setMinsdk(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIconurl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCategory(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDesc(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRating(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setListts(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
        entity.setIconDownloaded(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setApkDownloaded(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setApkts(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CloudAppDetails entity, long rowId) {
        entity.setCampaignId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CloudAppDetails entity) {
        if(entity != null) {
            return entity.getCampaignId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
